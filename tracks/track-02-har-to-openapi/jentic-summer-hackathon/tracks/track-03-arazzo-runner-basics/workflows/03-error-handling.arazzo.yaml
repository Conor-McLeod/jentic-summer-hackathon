arazzo: 1.0.0
info:
  title: Error Handling and Recovery Workflow
  description: Demonstrates robust workflow patterns with fallbacks and error recovery
  version: 1.0.0

workflows:
  - workflowId: robustDataFetch
    description: Fetch data with multiple fallback options and error handling
    inputs:
      type: object
      properties:
        primary_source:
          type: string
          description: Primary data source preference
          default: "reliable"
          enum: ["reliable", "unreliable", "experimental"]
        retry_count:
          type: integer
          description: Number of retries for failed operations
          default: 2
          minimum: 0
          maximum: 5
        timeout_seconds:
          type: integer
          description: Timeout for each operation in seconds
          default: 30
          minimum: 5
          maximum: 120
      
    steps:
      - stepId: tryPrimarySource
        description: Attempt to fetch from primary reliable source
        operationRef: '#/operations/fetchFromReliableAPI'
        continueOnError: true  # Don't fail the workflow if this step fails
        outputs:
          data: $response.body.results
          success: $response.status >= 200 && $response.status < 300
          error_message: $response.body.error
          source_used: "primary"

      - stepId: tryBackupSource
        description: Fetch from backup source if primary failed
        operationRef: '#/operations/fetchFromBackupAPI'
        condition: $steps.tryPrimarySource.outputs.success == false
        continueOnError: true
        outputs:
          data: $response.body.data
          success: $response.status >= 200 && $response.status < 300
          source_used: "backup"

      - stepId: tryFallbackSource
        description: Use fallback public API if both primary and backup failed
        operationRef: '#/operations/fetchFromFallbackAPI'
        condition: $steps.tryPrimarySource.outputs.success == false && $steps.tryBackupSource.outputs.success == false
        outputs:
          data: $response.body
          success: $response.status >= 200 && $response.status < 300
          source_used: "fallback"

      - stepId: validateData
        description: Validate the fetched data structure
        operationRef: '#/operations/validateDataStructure'
        parameters:
          data: $steps.tryPrimarySource.outputs.data || $steps.tryBackupSource.outputs.data || $steps.tryFallbackSource.outputs.data
          source: $steps.tryPrimarySource.outputs.source_used || $steps.tryBackupSource.outputs.source_used || $steps.tryFallbackSource.outputs.source_used
        dependsOn: [tryPrimarySource, tryBackupSource, tryFallbackSource]
        outputs:
          is_valid: $response.body.valid
          validation_errors: $response.body.errors
          processed_data: $response.body.processed_data

      - stepId: processResults
        description: Process the successfully fetched and validated data
        operationRef: '#/operations/processValidData'
        parameters:
          input_data: $steps.validateData.outputs.processed_data
          data_source: $steps.validateData.outputs.source || "unknown"
          validation_status: $steps.validateData.outputs.is_valid
        condition: $steps.validateData.outputs.is_valid == true
        dependsOn: [validateData]
        outputs:
          final_result: $response.body.result
          processing_time: $response.body.processing_time_ms
          success: true

      - stepId: handleFailure
        description: Handle case where all data sources failed
        operationRef: '#/operations/generateErrorReport'
        parameters:
          primary_error: $steps.tryPrimarySource.outputs.error_message || "No error message"
          backup_error: $steps.tryBackupSource.outputs.error_message || "Not attempted"
          fallback_error: $steps.tryFallbackSource.outputs.error_message || "Not attempted"
          validation_errors: $steps.validateData.outputs.validation_errors || []
        condition: $steps.validateData.outputs.is_valid == false || $steps.validateData.outputs.is_valid == null
        dependsOn: [validateData]
        outputs:
          error_report: $response.body.report
          recommendations: $response.body.recommendations
          success: false

operations:
  - operationId: fetchFromReliableAPI
    method: GET
    url: https://jsonplaceholder.typicode.com/posts
    description: Fetch from a reliable public API (JSONPlaceholder)
    parameters:
      - name: _limit
        in: query
        required: false
        schema:
          type: integer
          default: 5
        description: Limit number of results

  - operationId: fetchFromBackupAPI
    method: GET
    url: https://httpbin.org/json
    description: Fetch from backup API (httpbin - reliable test service)

  - operationId: fetchFromFallbackAPI
    method: GET
    url: https://api.github.com/zen
    description: Fetch from fallback API (GitHub zen - simple text response)

  - operationId: validateDataStructure
    method: POST
    url: https://httpbin.org/post
    description: Simulate data validation service
    headers:
      Content-Type: application/json
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                description: Data to validate
              source:
                type: string
                description: Source of the data
              validation_rules:
                type: array
                items:
                  type: string
                default: ["not_empty", "valid_json", "has_required_fields"]
            required: [data]

  - operationId: processValidData
    method: POST
    url: https://httpbin.org/post
    description: Process validated data (simulated processing service)
    headers:
      Content-Type: application/json
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              input_data:
                description: Validated data to process
              data_source:
                type: string
                description: Original source of data
              validation_status:
                type: boolean
                description: Whether data passed validation
              processing_options:
                type: object
                properties:
                  format:
                    type: string
                    default: "json"
                  include_metadata:
                    type: boolean
                    default: true
            required: [input_data]

  - operationId: generateErrorReport
    method: POST
    url: https://httpbin.org/post
    description: Generate comprehensive error report
    headers:
      Content-Type: application/json
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              primary_error:
                type: string
                description: Error from primary source
              backup_error:
                type: string
                description: Error from backup source
              fallback_error:
                type: string
                description: Error from fallback source
              validation_errors:
                type: array
                items:
                  type: string
                description: Validation error messages
              timestamp:
                type: string
                format: date-time
                description: When the errors occurred
              workflow_id:
                type: string
                default: "robustDataFetch"
            required: [primary_error]