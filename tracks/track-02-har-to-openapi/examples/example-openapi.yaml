openapi: 3.0.0
info:
  title: "Example Discovered API"
  description: "Sample API specification created from HAR analysis"
  version: "1.0.0"
  contact:
    name: "Hackathon Participant"
    email: "participant@example.com"
  x-jentic-source-url: "https://example.com"

servers:
  - url: "https://api.example.com"
    description: "Production API server"

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: "API token required for authentication"
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: "API key authentication"

  schemas:
    SearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        total:
          type: integer
          description: "Total number of matching items"
        page:
          type: integer
          description: "Current page number"
        limit:
          type: integer
          description: "Number of results per page"
      required: [results, total]

    SearchResult:
      type: object
      properties:
        id:
          type: string
          description: "Unique item identifier"
          example: "item_123456"
        title:
          type: string
          description: "Item title"
          example: "Sample Product"
        description:
          type: string
          description: "Brief item description"
          example: "This is a sample product description"
        price:
          type: number
          description: "Item price"
          example: 29.99
        currency:
          type: string
          description: "Price currency code"
          example: "USD"
        image_url:
          type: string
          format: uri
          description: "URL to item image"
          example: "https://example.com/images/item_123456.jpg"
        url:
          type: string
          format: uri
          description: "URL to item detail page"
          example: "https://example.com/items/item_123456"
      required: [id, title]

    ItemDetail:
      type: object
      properties:
        id:
          type: string
          example: "item_123456"
        title:
          type: string
          example: "Sample Product"
        description:
          type: string
          example: "Detailed product description with features and specifications"
        price:
          type: number
          example: 29.99
        currency:
          type: string
          example: "USD"
        images:
          type: array
          items:
            type: string
            format: uri
          example: ["https://example.com/images/item_123456_1.jpg", "https://example.com/images/item_123456_2.jpg"]
        specifications:
          type: object
          additionalProperties: true
          example:
            color: "Blue"
            size: "Medium"
            material: "Cotton"
        availability:
          type: string
          enum: [in_stock, out_of_stock, limited]
          example: "in_stock"
        category:
          type: string
          example: "Electronics"
        tags:
          type: array
          items:
            type: string
          example: ["popular", "new-arrival", "sale"]
      required: [id, title, description, price]

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: "Error message"
          example: "Invalid search query"
        code:
          type: string
          description: "Error code"
          example: "INVALID_QUERY"
        details:
          type: object
          additionalProperties: true
          description: "Additional error details"
      required: [error]

paths:
  /v1/search:
    get:
      operationId: searchItems
      summary: "Search for items"
      description: "Search the item catalog using various criteria and filters"
      parameters:
        - name: query
          in: query
          required: true
          description: "Search term to find relevant items"
          schema:
            type: string
            minLength: 1
            maxLength: 100
          example: "smartphone"
        - name: category
          in: query
          required: false
          description: "Filter by category"
          schema:
            type: string
            enum: [electronics, clothing, books, home, sports]
          example: "electronics"
        - name: min_price
          in: query
          required: false
          description: "Minimum price filter"
          schema:
            type: number
            minimum: 0
          example: 10.00
        - name: max_price
          in: query
          required: false
          description: "Maximum price filter"
          schema:
            type: number
            minimum: 0
          example: 500.00
        - name: page
          in: query
          required: false
          description: "Page number for pagination"
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: limit
          in: query
          required: false
          description: "Number of results per page"
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
        - name: sort
          in: query
          required: false
          description: "Sort order for results"
          schema:
            type: string
            enum: [relevance, price_asc, price_desc, newest, popularity]
            default: relevance
          example: "price_asc"
      responses:
        '200':
          description: "Search results"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
              examples:
                successful_search:
                  summary: "Successful search with results"
                  value:
                    results:
                      - id: "item_123456"
                        title: "Wireless Bluetooth Headphones"
                        description: "High-quality wireless headphones with noise cancellation"
                        price: 129.99
                        currency: "USD"
                        image_url: "https://example.com/images/headphones.jpg"
                        url: "https://example.com/items/item_123456"
                    total: 45
                    page: 1
                    limit: 20
                empty_search:
                  summary: "Search with no results"
                  value:
                    results: []
                    total: 0
                    page: 1
                    limit: 20
        '400':
          description: "Invalid search parameters"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Invalid search query"
                code: "INVALID_QUERY"
                details:
                  field: "query"
                  message: "Query must be at least 1 character long"
        '401':
          description: "Authentication required"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Authentication required"
                code: "UNAUTHORIZED"
        '429':
          description: "Rate limit exceeded"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Rate limit exceeded"
                code: "RATE_LIMIT_EXCEEDED"
                details:
                  retry_after: 60

  /v1/items/{id}:
    get:
      operationId: getItemById
      summary: "Get item details"
      description: "Retrieve detailed information about a specific item"
      parameters:
        - name: id
          in: path
          required: true
          description: "Unique identifier for the item"
          schema:
            type: string
            pattern: '^item_[a-zA-Z0-9]+$'
          example: "item_123456"
        - name: include_related
          in: query
          required: false
          description: "Include related/similar items in response"
          schema:
            type: boolean
            default: false
          example: true
      responses:
        '200':
          description: "Item details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDetail'
              example:
                id: "item_123456"
                title: "Wireless Bluetooth Headphones"
                description: "Premium wireless headphones featuring active noise cancellation, 30-hour battery life, and high-resolution audio drivers."
                price: 129.99
                currency: "USD"
                images:
                  - "https://example.com/images/headphones_1.jpg"
                  - "https://example.com/images/headphones_2.jpg"
                specifications:
                  color: "Black"
                  weight: "250g"
                  battery_life: "30 hours"
                  connectivity: "Bluetooth 5.0"
                availability: "in_stock"
                category: "Electronics"
                tags: ["wireless", "noise-cancelling", "premium"]
        '404':
          description: "Item not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Item not found"
                code: "ITEM_NOT_FOUND"
                details:
                  item_id: "item_123456"
        '401':
          description: "Authentication required"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/categories:
    get:
      operationId: getCategories
      summary: "Get available categories"
      description: "Retrieve list of available item categories"
      responses:
        '200':
          description: "List of categories"
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        item_count:
                          type: integer
                      required: [id, name]
              example:
                categories:
                  - id: "electronics"
                    name: "Electronics"
                    item_count: 1234
                  - id: "clothing"
                    name: "Clothing"
                    item_count: 5678
                  - id: "books"
                    name: "Books"
                    item_count: 3456